@page
@model WebApplication2.Pages.ChooseStrategiesModel
@{
    ViewData["Title"] = "Step 2";
}

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/osmtogeojson/osmtogeojson.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-draw/dist/leaflet.draw.css" />
    <script src="https://unpkg.com/leaflet-draw/dist/leaflet.draw.js"></script>
    <style>
        #map {
            height: 500px;
            width: 100%;
        }
    </style>
</head>

<h1>Step 2: Choose Strategies</h1>

<!-- File Upload Form -->
<form method="post" enctype="multipart/form-data">
    <label for="osmFile">Upload OSM File:</label>
    <input type="file" id="osmFile" name="osmFile" accept=".osm" />
    <button type="submit">Upload</button>
</form>

<div>
    <div>UAV data: @Model.UAVs.Count</div>
    <div>Area: @Model.GeoJsonData.Length km²</div>
</div>

<div id="map"></div>

<script>
    // Initialize Map
    const map = L.map('map').setView([0, 0], 2);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19 }).addTo(map);

    // OSM Data from the server (Raw XML)
    var osmData = `@Model.OsmData`.trim();

    if (osmData) {
        try {
            // Convert OSM data to GeoJSON
            const geoJsonData = osmtogeojson(new DOMParser().parseFromString(osmData, 'text/xml'));

            // Filter only buildings
            const buildingFeatures = geoJsonData.features.filter(feature =>
                feature.properties?.building &&
                ['Polygon', 'MultiPolygon'].includes(feature.geometry.type)
            );

            // Add buildings to the map
            const buildingLayer = L.geoJSON(buildingFeatures, {
                style: { color: 'gray', weight: 2 }
            }).addTo(map);

            // Fit map bounds to building layer
            map.fitBounds(buildingLayer.getBounds());
        } catch (error) {
            console.error("Error parsing OSM data:", error);
            alert("Failed to load OSM data.");
        }
    } else {
        console.warn("No OSM data available.");
    }
</script>

@if (Model.OSMFilePath != "No file found.")
{
    <p>The uploaded OSM file is located at: @Model.OSMFilePath</p>
}
else
{
    <p>No OSM file has been uploaded yet.</p>
}

<p>Here are some suggested strategies:</p>

@foreach (var strategy in Model.Strategies)
{
    <div>
        <h3>Option @(strategy.Id): @(strategy.Name)</h3>
        <p><strong>Technology:</strong> @(strategy.Description)</p>
        <div>
            <div>UAVs: @(strategy.UAVCount)</div>
            <div>Max Duration: @(strategy.MaxDuration)</div>
            <div>Max Range: @(strategy.MaxRange)</div>
            <div>Transmission Speed: @(strategy.TransmissionSpeed)</div>
        </div>
        <button onclick="chooseOption(@(strategy.Id))" class="btn btn-primary">Choose</button>
    </div>
}
