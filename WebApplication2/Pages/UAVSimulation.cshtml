@page
@model WebApplication2.Pages.UAVSimulationModel
@using WebApplication2.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<h2>UAV Simulation</h2>

<div>
    <h4>UAV Data:</h4>
    <table class="table" id="uavTable">
        <thead>
            <tr>
                <th>UAV ID</th>
                <th>Energy</th>
                <th>Position (x, y, z)</th>
                <th>Coverage Radius</th>
                <th>Speed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var uav in Model.UAVs)
            {
                <tr id="uav-@uav.Id">
                    <td>@uav.Id</td>
                    <td>@uav.Energy</td>
                    <td>@string.Join(", ", uav.Position)</td>
                    <td>@uav.CoverageRadius</td>
                    <td>@uav.Speed</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<h3>UAV Map Visualization:</h3>
<div id="map" style="width: 600px; height: 400px;"></div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        var map = L.map('map').setView([51.505, -0.09], 13);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        @foreach (var uav in Model.UAVs)
        {
            <text>
                    L.marker([@uav.Position[0], @uav.Position[1]]).addTo(map)
                    .bindPopup("UAV ID: @uav.Id, Position: (@uav.Position[0], @uav.Position[1], @uav.Position[2])")
                    .openPopup();
            </text>
        }

            // Periodic update every 5 seconds
            setInterval(function () {
                fetchUAVData();
            }, 5000); // 5000ms = 5 seconds

        function fetchUAVData() {
            fetch('/UAVSimulation/GetUpdatedUAVs')
                .then(response => response.json())
                .then(data => {
                    updateUAVTable(data);
                    updateUAVMap(data);
                })
                .catch(error => console.error('Error fetching UAV data:', error));
        }

        function updateUAVTable(data) {
            // Clear current table rows
            const tableBody = document.getElementById('uavTable').getElementsByTagName('tbody')[0];
            tableBody.innerHTML = '';

            // Insert updated UAV data into table
            data.forEach(uav => {
                const row = tableBody.insertRow();
                row.id = 'uav-' + uav.Id;
                row.innerHTML = `
                        <td>${uav.Id}</td>
                        <td>${uav.Energy}</td>
                        <td>${uav.Position.join(', ')}</td>
                        <td>${uav.CoverageRadius}</td>
                        <td>${uav.Speed}</td>
                    `;
            });
        }

        function updateUAVMap(data) {
            // Clear previous markers
            map.eachLayer(layer => {
                if (layer instanceof L.Marker) {
                    map.removeLayer(layer);
                }
            });

            // Add new markers based on updated UAV data
            data.forEach(uav => {
                L.marker([uav.Position[0], uav.Position[1]]).addTo(map)
                    .bindPopup("UAV ID: " + uav.Id + ", Position: (" + uav.Position.join(', ') + ")")
                    .openPopup();
            });
        }
    </script>
}
